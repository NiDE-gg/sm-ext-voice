// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessages.proto

#include "netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CCLCMsg_VoiceData::CCLCMsg_VoiceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , xuid_(uint64_t{0u})
  , sequence_bytes_(0)
  , section_number_(0u)
  , uncompressed_sample_offset_(0u)
  , format_(1)
{}
struct CCLCMsg_VoiceDataDefaultTypeInternal {
  constexpr CCLCMsg_VoiceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCLCMsg_VoiceDataDefaultTypeInternal() {}
  union {
    CCLCMsg_VoiceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCLCMsg_VoiceDataDefaultTypeInternal _CCLCMsg_VoiceData_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_netmessages_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_netmessages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_netmessages_2eproto = nullptr;

const uint32_t TableStruct_netmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, data_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, xuid_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, format_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, sequence_bytes_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, section_number_),
  PROTOBUF_FIELD_OFFSET(::CCLCMsg_VoiceData, uncompressed_sample_offset_),
  0,
  1,
  5,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, -1, sizeof(::CCLCMsg_VoiceData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCLCMsg_VoiceData_default_instance_),
};

const char descriptor_table_protodef_netmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021netmessages.proto\032 google/protobuf/des"
  "criptor.proto\"\300\001\n\021CCLCMsg_VoiceData\022\014\n\004d"
  "ata\030\001 \001(\014\022\014\n\004xuid\030\002 \001(\006\022;\n\006format\030\003 \001(\0162"
  "\022.VoiceDataFormat_t:\027VOICEDATA_FORMAT_EN"
  "GINE\022\026\n\016sequence_bytes\030\004 \001(\005\022\026\n\016section_"
  "number\030\005 \001(\r\022\"\n\032uncompressed_sample_offs"
  "et\030\006 \001(\r*L\n\021VoiceDataFormat_t\022\032\n\026VOICEDA"
  "TA_FORMAT_STEAM\020\000\022\033\n\027VOICEDATA_FORMAT_EN"
  "GINE\020\001B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_netmessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_netmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netmessages_2eproto = {
  false, false, 331, descriptor_table_protodef_netmessages_2eproto, "netmessages.proto", 
  &descriptor_table_netmessages_2eproto_once, descriptor_table_netmessages_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_netmessages_2eproto::offsets,
  file_level_metadata_netmessages_2eproto, file_level_enum_descriptors_netmessages_2eproto, file_level_service_descriptors_netmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_netmessages_2eproto_getter() {
  return &descriptor_table_netmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_netmessages_2eproto(&descriptor_table_netmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceDataFormat_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_netmessages_2eproto);
  return file_level_enum_descriptors_netmessages_2eproto[0];
}
bool VoiceDataFormat_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CCLCMsg_VoiceData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCLCMsg_VoiceData>()._has_bits_);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_xuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sequence_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_section_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uncompressed_sample_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCLCMsg_VoiceData::CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CCLCMsg_VoiceData)
}
CCLCMsg_VoiceData::CCLCMsg_VoiceData(const CCLCMsg_VoiceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&xuid_, &from.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&xuid_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_VoiceData)
}

inline void CCLCMsg_VoiceData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&xuid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uncompressed_sample_offset_) -
    reinterpret_cast<char*>(&xuid_)) + sizeof(uncompressed_sample_offset_));
format_ = 1;
}

CCLCMsg_VoiceData::~CCLCMsg_VoiceData() {
  // @@protoc_insertion_point(destructor:CCLCMsg_VoiceData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CCLCMsg_VoiceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_VoiceData::ArenaDtor(void* object) {
  CCLCMsg_VoiceData* _this = reinterpret_cast< CCLCMsg_VoiceData* >(object);
  (void)_this;
}
void CCLCMsg_VoiceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCLCMsg_VoiceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCLCMsg_VoiceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_VoiceData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uncompressed_sample_offset_) -
        reinterpret_cast<char*>(&xuid_)) + sizeof(uncompressed_sample_offset_));
    format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCLCMsg_VoiceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 xuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_xuid(&has_bits);
          xuid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::VoiceDataFormat_t_IsValid(val))) {
            _internal_set_format(static_cast<::VoiceDataFormat_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 sequence_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_sequence_bytes(&has_bits);
          sequence_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 section_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_section_number(&has_bits);
          section_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 uncompressed_sample_offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_uncompressed_sample_offset(&has_bits);
          uncompressed_sample_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CCLCMsg_VoiceData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_VoiceData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // optional fixed64 xuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_xuid(), target);
  }

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  // optional int32 sequence_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_sequence_bytes(), target);
  }

  // optional uint32 section_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_section_number(), target);
  }

  // optional uint32 uncompressed_sample_offset = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uncompressed_sample_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_VoiceData)
  return target;
}

size_t CCLCMsg_VoiceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_VoiceData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes data = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional fixed64 xuid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 sequence_bytes = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sequence_bytes());
    }

    // optional uint32 section_number = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_section_number());
    }

    // optional uint32 uncompressed_sample_offset = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_uncompressed_sample_offset());
    }

    // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CCLCMsg_VoiceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CCLCMsg_VoiceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CCLCMsg_VoiceData::GetClassData() const { return &_class_data_; }

void CCLCMsg_VoiceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CCLCMsg_VoiceData *>(to)->MergeFrom(
      static_cast<const CCLCMsg_VoiceData &>(from));
}


void CCLCMsg_VoiceData::MergeFrom(const CCLCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      xuid_ = from.xuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_bytes_ = from.sequence_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      section_number_ = from.section_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      uncompressed_sample_offset_ = from.uncompressed_sample_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CCLCMsg_VoiceData::CopyFrom(const CCLCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_VoiceData::IsInitialized() const {
  return true;
}

void CCLCMsg_VoiceData::InternalSwap(CCLCMsg_VoiceData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCLCMsg_VoiceData, uncompressed_sample_offset_)
      + sizeof(CCLCMsg_VoiceData::uncompressed_sample_offset_)
      - PROTOBUF_FIELD_OFFSET(CCLCMsg_VoiceData, xuid_)>(
          reinterpret_cast<char*>(&xuid_),
          reinterpret_cast<char*>(&other->xuid_));
  swap(format_, other->format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCLCMsg_VoiceData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_netmessages_2eproto_getter, &descriptor_table_netmessages_2eproto_once,
      file_level_metadata_netmessages_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CCLCMsg_VoiceData* Arena::CreateMaybeMessage< ::CCLCMsg_VoiceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCLCMsg_VoiceData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
