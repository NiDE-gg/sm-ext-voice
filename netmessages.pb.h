// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
// FIX TRICK BECAUSE THERE ARE CROSS REFERENCES OF tier0/byteswap.h and GLIBC byteswap.h
#ifndef _BYTESWAP_H
  #include "/usr/include/byteswap.h"
#endif
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
// FIX TRICK BECAUSE schema IS ALREADY A #DEFINE in tier0/basetypes.h
#undef schema
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_netmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_netmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_netmessages_2eproto;
class CCLCMsg_VoiceData;
struct CCLCMsg_VoiceDataDefaultTypeInternal;
extern CCLCMsg_VoiceDataDefaultTypeInternal _CCLCMsg_VoiceData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCLCMsg_VoiceData* Arena::CreateMaybeMessage<::CCLCMsg_VoiceData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum VoiceDataFormat_t : int {
  VOICEDATA_FORMAT_STEAM = 0,
  VOICEDATA_FORMAT_ENGINE = 1
};
bool VoiceDataFormat_t_IsValid(int value);
constexpr VoiceDataFormat_t VoiceDataFormat_t_MIN = VOICEDATA_FORMAT_STEAM;
constexpr VoiceDataFormat_t VoiceDataFormat_t_MAX = VOICEDATA_FORMAT_ENGINE;
constexpr int VoiceDataFormat_t_ARRAYSIZE = VoiceDataFormat_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VoiceDataFormat_t_descriptor();
template<typename T>
inline const std::string& VoiceDataFormat_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VoiceDataFormat_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VoiceDataFormat_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VoiceDataFormat_t_descriptor(), enum_t_value);
}
inline bool VoiceDataFormat_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VoiceDataFormat_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VoiceDataFormat_t>(
    VoiceDataFormat_t_descriptor(), name, value);
}
// ===================================================================

class CCLCMsg_VoiceData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCLCMsg_VoiceData) */ {
 public:
  inline CCLCMsg_VoiceData() : CCLCMsg_VoiceData(nullptr) {}
  ~CCLCMsg_VoiceData() override;
  explicit constexpr CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCLCMsg_VoiceData(const CCLCMsg_VoiceData& from);
  CCLCMsg_VoiceData(CCLCMsg_VoiceData&& from) noexcept
    : CCLCMsg_VoiceData() {
    *this = ::std::move(from);
  }

  inline CCLCMsg_VoiceData& operator=(const CCLCMsg_VoiceData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCLCMsg_VoiceData& operator=(CCLCMsg_VoiceData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CCLCMsg_VoiceData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCLCMsg_VoiceData* internal_default_instance() {
    return reinterpret_cast<const CCLCMsg_VoiceData*>(
               &_CCLCMsg_VoiceData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCLCMsg_VoiceData& a, CCLCMsg_VoiceData& b) {
    a.Swap(&b);
  }
  inline void Swap(CCLCMsg_VoiceData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCLCMsg_VoiceData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CCLCMsg_VoiceData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CCLCMsg_VoiceData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CCLCMsg_VoiceData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CCLCMsg_VoiceData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCLCMsg_VoiceData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCLCMsg_VoiceData";
  }
  protected:
  explicit CCLCMsg_VoiceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kXuidFieldNumber = 2,
    kSequenceBytesFieldNumber = 4,
    kSectionNumberFieldNumber = 5,
    kUncompressedSampleOffsetFieldNumber = 6,
    kFormatFieldNumber = 3,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional fixed64 xuid = 2;
  bool has_xuid() const;
  private:
  bool _internal_has_xuid() const;
  public:
  void clear_xuid();
  uint64_t xuid() const;
  void set_xuid(uint64_t value);
  private:
  uint64_t _internal_xuid() const;
  void _internal_set_xuid(uint64_t value);
  public:

  // optional int32 sequence_bytes = 4;
  bool has_sequence_bytes() const;
  private:
  bool _internal_has_sequence_bytes() const;
  public:
  void clear_sequence_bytes();
  int32_t sequence_bytes() const;
  void set_sequence_bytes(int32_t value);
  private:
  int32_t _internal_sequence_bytes() const;
  void _internal_set_sequence_bytes(int32_t value);
  public:

  // optional uint32 section_number = 5;
  bool has_section_number() const;
  private:
  bool _internal_has_section_number() const;
  public:
  void clear_section_number();
  uint32_t section_number() const;
  void set_section_number(uint32_t value);
  private:
  uint32_t _internal_section_number() const;
  void _internal_set_section_number(uint32_t value);
  public:

  // optional uint32 uncompressed_sample_offset = 6;
  bool has_uncompressed_sample_offset() const;
  private:
  bool _internal_has_uncompressed_sample_offset() const;
  public:
  void clear_uncompressed_sample_offset();
  uint32_t uncompressed_sample_offset() const;
  void set_uncompressed_sample_offset(uint32_t value);
  private:
  uint32_t _internal_uncompressed_sample_offset() const;
  void _internal_set_uncompressed_sample_offset(uint32_t value);
  public:

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::VoiceDataFormat_t format() const;
  void set_format(::VoiceDataFormat_t value);
  private:
  ::VoiceDataFormat_t _internal_format() const;
  void _internal_set_format(::VoiceDataFormat_t value);
  public:

  // @@protoc_insertion_point(class_scope:CCLCMsg_VoiceData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint64_t xuid_;
  int32_t sequence_bytes_;
  uint32_t section_number_;
  uint32_t uncompressed_sample_offset_;
  int format_;
  friend struct ::TableStruct_netmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCLCMsg_VoiceData

// optional bytes data = 1;
inline bool CCLCMsg_VoiceData::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_data() const {
  return _internal_has_data();
}
inline void CCLCMsg_VoiceData::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCLCMsg_VoiceData::data() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CCLCMsg_VoiceData::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.data)
}
inline std::string* CCLCMsg_VoiceData::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:CCLCMsg_VoiceData.data)
  return _s;
}
inline const std::string& CCLCMsg_VoiceData::_internal_data() const {
  return data_.Get();
}
inline void CCLCMsg_VoiceData::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CCLCMsg_VoiceData::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CCLCMsg_VoiceData::release_data() {
  // @@protoc_insertion_point(field_release:CCLCMsg_VoiceData.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CCLCMsg_VoiceData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CCLCMsg_VoiceData.data)
}

// optional fixed64 xuid = 2;
inline bool CCLCMsg_VoiceData::_internal_has_xuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_xuid() const {
  return _internal_has_xuid();
}
inline void CCLCMsg_VoiceData::clear_xuid() {
  xuid_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t CCLCMsg_VoiceData::_internal_xuid() const {
  return xuid_;
}
inline uint64_t CCLCMsg_VoiceData::xuid() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.xuid)
  return _internal_xuid();
}
inline void CCLCMsg_VoiceData::_internal_set_xuid(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  xuid_ = value;
}
inline void CCLCMsg_VoiceData::set_xuid(uint64_t value) {
  _internal_set_xuid(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.xuid)
}

// optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
inline bool CCLCMsg_VoiceData::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_format() const {
  return _internal_has_format();
}
inline void CCLCMsg_VoiceData::clear_format() {
  format_ = 1;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::VoiceDataFormat_t CCLCMsg_VoiceData::_internal_format() const {
  return static_cast< ::VoiceDataFormat_t >(format_);
}
inline ::VoiceDataFormat_t CCLCMsg_VoiceData::format() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.format)
  return _internal_format();
}
inline void CCLCMsg_VoiceData::_internal_set_format(::VoiceDataFormat_t value) {
  assert(::VoiceDataFormat_t_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  format_ = value;
}
inline void CCLCMsg_VoiceData::set_format(::VoiceDataFormat_t value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.format)
}

// optional int32 sequence_bytes = 4;
inline bool CCLCMsg_VoiceData::_internal_has_sequence_bytes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_sequence_bytes() const {
  return _internal_has_sequence_bytes();
}
inline void CCLCMsg_VoiceData::clear_sequence_bytes() {
  sequence_bytes_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t CCLCMsg_VoiceData::_internal_sequence_bytes() const {
  return sequence_bytes_;
}
inline int32_t CCLCMsg_VoiceData::sequence_bytes() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.sequence_bytes)
  return _internal_sequence_bytes();
}
inline void CCLCMsg_VoiceData::_internal_set_sequence_bytes(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  sequence_bytes_ = value;
}
inline void CCLCMsg_VoiceData::set_sequence_bytes(int32_t value) {
  _internal_set_sequence_bytes(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.sequence_bytes)
}

// optional uint32 section_number = 5;
inline bool CCLCMsg_VoiceData::_internal_has_section_number() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_section_number() const {
  return _internal_has_section_number();
}
inline void CCLCMsg_VoiceData::clear_section_number() {
  section_number_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t CCLCMsg_VoiceData::_internal_section_number() const {
  return section_number_;
}
inline uint32_t CCLCMsg_VoiceData::section_number() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.section_number)
  return _internal_section_number();
}
inline void CCLCMsg_VoiceData::_internal_set_section_number(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  section_number_ = value;
}
inline void CCLCMsg_VoiceData::set_section_number(uint32_t value) {
  _internal_set_section_number(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.section_number)
}

// optional uint32 uncompressed_sample_offset = 6;
inline bool CCLCMsg_VoiceData::_internal_has_uncompressed_sample_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCLCMsg_VoiceData::has_uncompressed_sample_offset() const {
  return _internal_has_uncompressed_sample_offset();
}
inline void CCLCMsg_VoiceData::clear_uncompressed_sample_offset() {
  uncompressed_sample_offset_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline uint32_t CCLCMsg_VoiceData::_internal_uncompressed_sample_offset() const {
  return uncompressed_sample_offset_;
}
inline uint32_t CCLCMsg_VoiceData::uncompressed_sample_offset() const {
  // @@protoc_insertion_point(field_get:CCLCMsg_VoiceData.uncompressed_sample_offset)
  return _internal_uncompressed_sample_offset();
}
inline void CCLCMsg_VoiceData::_internal_set_uncompressed_sample_offset(uint32_t value) {
  _has_bits_[0] |= 0x00000010u;
  uncompressed_sample_offset_ = value;
}
inline void CCLCMsg_VoiceData::set_uncompressed_sample_offset(uint32_t value) {
  _internal_set_uncompressed_sample_offset(value);
  // @@protoc_insertion_point(field_set:CCLCMsg_VoiceData.uncompressed_sample_offset)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VoiceDataFormat_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VoiceDataFormat_t>() {
  return ::VoiceDataFormat_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_netmessages_2eproto
